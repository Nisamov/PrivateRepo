name: Build and publish .deb package

on:
  # Permite ejecutar el workflow manualmente
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Show user and current directory
        run: |
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"

      - name: Set up dependencies
        run: |
          sudo apt update
          sudo apt install -y dpkg-dev

      - name: Show file structure for debugging
        run: |
          echo "Listing current directory:"
          ls -R  # Esto listará todo el directorio del repositorio para asegurar que los archivos están en su lugar

      - name: Set permissions
        run: |
          # Asegúrate de estar en la ruta correcta para ejecutar chmod
          ls -l ./usr/local/sbin/
          chmod 0775 ./DEBIAN/prerm
          chmod +x ./usr/local/sbin/ssp

      - name: List files before creating directory for .deb
        run: |
          echo "Listing files in the current directory before creating .deb directory:"
          ls -al

      - name: Create directory structure for .deb
        run: |
          # Crea la estructura de directorios necesaria para el paquete .deb
          mkdir -p package/DEBIAN
          mkdir -p package/usr/local/sbin
          mkdir -p package/etc/ssp
          mkdir -p package/lib/systemd/system

          # Copia los archivos al directorio correcto
          cp -r DEBIAN/* package/DEBIAN/
          cp -r usr/local/sbin/* package/usr/local/sbin/
          cp -r etc/ssp/* package/etc/ssp/
          cp -r lib/systemd/* package/lib/systemd/system/

      - name: List files before creating directory for .deb second time
        run: |
          echo "Listing files in the current directory before creating .deb directory:"
          ls -al

      - name: Build .deb package
        run: |
          # Aquí ya no necesitamos la versión ni crear tags
          dpkg-deb --build package ssp-package.deb  # Construye el paquete .deb usando un nombre fijo

      - name: Set up Git authentication
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ secrets.SSP_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Create GitHub Release without a tag
        run: |
          # Crear una release sin tag
          curl -X POST \
            -H "Authorization: token ${{ secrets.SSP_TOKEN }}" \
            -d '{"tag_name": "latest", "name": "Release latest", "body": "New .deb package release", "draft": false, "prerelease": false}' \
            https://api.github.com/repos/${{ github.repository }}/releases

      - name: Upload to GitHub Release
        run: |
          # Subir el archivo .deb a la release creada
          curl -X POST \
            -H "Authorization: token ${{ secrets.SSP_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @ssp-package.deb \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/latest/assets?name=ssp-package.deb"
